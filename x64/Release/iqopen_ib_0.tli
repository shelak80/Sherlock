// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (92683e73).
//
// d:\documents\3d systems korea\development\issues\controlx\gv-5647\new\faroopendemoapp\x64\release\iqopen.tli
//
// Wrapper implementations for type library C:\3DSystems\ScanDesign\XO\Branch\ControlX2018\XOV\DLL\x64.Release\bin\iQopen.dll
// compiler-generated file created 11/13/17 at 14:17:51 - DO NOT EDIT!

#pragma once

//
// interface IiQLicensedInterfaceIf wrapper method implementations
//

inline void IiQLicensedInterfaceIf::PutLicense ( _bstr_t License ) {
    HRESULT _hr = put_License(License);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IiQLicensedInterfaceIf::GetLicense ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_License(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IiQFitObjIf wrapper method implementations
//

inline VARIANT_BOOL IiQFitObjIf::isScanFitObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isScanFitObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQScanFitObjIfPtr IiQFitObjIf::getScanFitObjSpecificIf ( ) {
    struct IiQScanFitObjIf * _result = 0;
    HRESULT _hr = raw_getScanFitObjSpecificIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQScanFitObjIfPtr(_result, false);
}

//
// interface IFAROScanAnglesIf wrapper method implementations
//

inline VARIANT_BOOL IFAROScanAnglesIf::getHorizontalAngles ( int col, double * start, double * delta ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getHorizontalAngles(col, start, delta, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFAROScanAnglesIf::getVerticalAngles ( int col, double * top, double * delta ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getVerticalAngles(col, top, delta, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IFAROScanAnglesIf::GetColEndFrontSight ( ) {
    int _result = 0;
    HRESULT _hr = get_ColEndFrontSight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFAROScanAnglesIf::getHorizontalIndices ( int col, double * start, double * delta ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getHorizontalIndices(col, start, delta, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFAROScanAnglesIf::getHorizontalAngle ( int row, int col, double * phi ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getHorizontalAngle(row, col, phi, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IiQScanObjIf wrapper method implementations
//

inline int IiQScanObjIf::getNumRows ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getNumCols ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getPosition ( double * x, double * y, double * z, VARIANT_BOOL globalTrafo ) {
    int _result = 0;
    HRESULT _hr = raw_getPosition(x, y, z, globalTrafo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getOrientation ( double * x, double * y, double * z, double * angle, VARIANT_BOOL globalTrafo ) {
    int _result = 0;
    HRESULT _hr = raw_getOrientation(x, y, z, angle, globalTrafo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getScanPointCartGlobal ( int row, int col, double * x, double * y, double * z, int * refl ) {
    int _result = 0;
    HRESULT _hr = raw_getScanPointCartGlobal(row, col, x, y, z, refl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getDate ( int * scanYear, int * scanMonth, int * scanDay, int * scanHour, int * scanMin, int * scanSec, int * scanMSec ) {
    int _result = 0;
    HRESULT _hr = raw_getDate(scanYear, scanMonth, scanDay, scanHour, scanMin, scanSec, scanMSec, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getHardwareInfo ( BSTR * hwID, BSTR * hwType, BSTR * hwSerial, BSTR * hwInfo, double * hwRange ) {
    int _result = 0;
    HRESULT _hr = raw_getHardwareInfo(hwID, hwType, hwSerial, hwInfo, hwRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getException ( ) {
    int _result = 0;
    HRESULT _hr = raw_getException(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IiQScanObjIf::getLoadState ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLoadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::load ( ) {
    int _result = 0;
    HRESULT _hr = raw_load(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::unload ( ) {
    int _result = 0;
    HRESULT _hr = raw_unload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getScanPointPolar ( int row, int col, double * phi, double * theta, double * dist, int * refl ) {
    int _result = 0;
    HRESULT _hr = raw_getScanPointPolar(row, col, phi, theta, dist, refl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::placeScan ( ) {
    int _result = 0;
    HRESULT _hr = raw_placeScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::setHardwareInfo ( _bstr_t hwID, _bstr_t hwType, _bstr_t hwSerial, _bstr_t hwInfo, double hwRange ) {
    int _result = 0;
    HRESULT _hr = raw_setHardwareInfo(hwID, hwType, hwSerial, hwInfo, hwRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFAROScanAnglesIfPtr IiQScanObjIf::getAnglesIf ( ) {
    struct IFAROScanAnglesIf * _result = 0;
    HRESULT _hr = raw_getAnglesIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFAROScanAnglesIfPtr(_result, false);
}

inline int IiQScanObjIf::getCalibFileName ( BSTR * fileName ) {
    int _result = 0;
    HRESULT _hr = raw_getCalibFileName(fileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getCalibInfo ( double * distOffset, double * distFactor, double * mirrorAdjustment, double * mirrorAxisAdjustment, double * horLaserAdjustment, double * vertLaserAdjustment, double * addtlAmplOffset, double * addtlAmplFactor, double * distCalibAngle, double * distCalibLength, double * triggerOffset ) {
    int _result = 0;
    HRESULT _hr = raw_getCalibInfo(distOffset, distFactor, mirrorAdjustment, mirrorAxisAdjustment, horLaserAdjustment, vertLaserAdjustment, addtlAmplOffset, addtlAmplFactor, distCalibAngle, distCalibLength, triggerOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IiQScanObjIf::GetscanReflectionMode ( ) {
    long _result = 0;
    HRESULT _hr = get_scanReflectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQScanObjIf::PutscanReflectionMode ( long pVal ) {
    HRESULT _hr = put_scanReflectionMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IiQScanObjIf::getColRow ( int * col, int * row, double x, double y, double z ) {
    int _result = 0;
    HRESULT _hr = raw_getColRow(col, row, x, y, z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQScanObjIf::PutActive ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Active(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IiQScanObjIf::getInclinometerAxis ( double * x, double * y, double * z ) {
    int _result = 0;
    HRESULT _hr = raw_getInclinometerAxis(x, y, z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getCompassAxis ( double * x, double * y, double * z ) {
    int _result = 0;
    HRESULT _hr = raw_getCompassAxis(x, y, z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQScanObjIf::getAltimeterHeight ( double * height ) {
    int _result = 0;
    HRESULT _hr = raw_getAltimeterHeight(height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IiQSphereObjIf wrapper method implementations
//

inline int IiQSphereObjIf::getPosition ( double * x, double * y, double * z, VARIANT_BOOL globalTrafo ) {
    int _result = 0;
    HRESULT _hr = raw_getPosition(x, y, z, globalTrafo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IiQSelectionBorderIf wrapper method implementations
//

inline HRESULT IiQSelectionBorderIf::addPoint ( int row, int col ) {
    HRESULT _hr = raw_addPoint(row, col);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IiQSelectionBorderIf::clearPoints ( ) {
    HRESULT _hr = raw_clearPoints();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void IiQSelectionBorderIf::PutSelectionMode ( int SelectionMode ) {
    HRESULT _hr = put_SelectionMode(SelectionMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IiQSelectionBorderIf::GetSelectionMode ( ) {
    int _result = 0;
    HRESULT _hr = get_SelectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQSelectionBorderIf::PutSelectionType ( _bstr_t SelectionType ) {
    HRESULT _hr = put_SelectionType(SelectionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IiQSelectionBorderIf::GetSelectionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IiQSelectionBorderIf::apply ( ) {
    HRESULT _hr = raw_apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IiQAttributeIf wrapper method implementations
//

inline int IiQAttributeIf::setValue ( _bstr_t value ) {
    int _result = 0;
    HRESULT _hr = raw_setValue(value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQAttributeIf::setValueAndWaitForMatch ( _bstr_t value, struct IiQAttributeIf * observedAttribute, double timeOut ) {
    int _result = 0;
    HRESULT _hr = raw_setValueAndWaitForMatch(value, observedAttribute, timeOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IiQAttributeIf::getValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IiQAttributeIf::addInfo ( _bstr_t key, _bstr_t value ) {
    HRESULT _hr = raw_addInfo(key, value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IiQAttributeIf::clearInfos ( ) {
    HRESULT _hr = raw_clearInfos();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IiQAttributeIf::getInfoByKey ( _bstr_t key ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getInfoByKey(key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline unsigned long IiQAttributeIf::getNumberInfos ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_getNumberInfos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQAttributeIf::GetNumMatches ( ) {
    int _result = 0;
    HRESULT _hr = get_NumMatches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQAttributeIf::PutNumMatches ( int NumMatches ) {
    HRESULT _hr = put_NumMatches(NumMatches);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IiQAttributeIf::addMatchCandidate ( _bstr_t candidate ) {
    HRESULT _hr = raw_addMatchCandidate(candidate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IiQAttributeIf::getMatchCandidate ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getMatchCandidate(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IiQAttributeIf::GetNumMatchCandidates ( ) {
    int _result = 0;
    HRESULT _hr = get_NumMatchCandidates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IiQAttributeIf::clearMatchCandidates ( ) {
    HRESULT _hr = raw_clearMatchCandidates();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IiQObjectIf wrapper method implementations
//

inline _bstr_t IiQObjectIf::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IiQObjectIf::getNumChildren ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQObjectIfPtr IiQObjectIf::getChild ( int childNb ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getChild(childNb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline IiQObjectIfPtr IiQObjectIf::getParent ( ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline int IiQObjectIf::getNumAttributes ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQScanObjIfPtr IiQObjectIf::getScanObjSpecificIf ( ) {
    struct IiQScanObjIf * _result = 0;
    HRESULT _hr = raw_getScanObjSpecificIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQScanObjIfPtr(_result, false);
}

inline VARIANT_BOOL IiQObjectIf::isScanObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isScanObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IiQObjectIf::isFitObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isFitObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQFitObjIfPtr IiQObjectIf::getFitObjSpecificIf ( ) {
    struct IiQFitObjIf * _result = 0;
    HRESULT _hr = raw_getFitObjSpecificIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQFitObjIfPtr(_result, false);
}

inline IiQObjectIfPtr IiQObjectIf::getActiveFitObjIf ( ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getActiveFitObjIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline int IiQObjectIf::getAttribute ( _bstr_t id, BSTR * content ) {
    int _result = 0;
    HRESULT _hr = raw_getAttribute(id, content, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQObjectIf::setAttribute ( _bstr_t id, _bstr_t content ) {
    int _result = 0;
    HRESULT _hr = raw_setAttribute(id, content, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IiQObjectIf::hasActiveFitObjIf ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_hasActiveFitObjIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQObjectIf::setName ( _bstr_t objName ) {
    int _result = 0;
    HRESULT _hr = raw_setName(objName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQSphereObjIfPtr IiQObjectIf::getSphereObjSpecificIf ( ) {
    struct IiQSphereObjIf * _result = 0;
    HRESULT _hr = raw_getSphereObjSpecificIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQSphereObjIfPtr(_result, false);
}

inline VARIANT_BOOL IiQObjectIf::isSphereObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isSphereObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQObjectIf::createChild ( _bstr_t objType, _bstr_t objName, struct IiQObjectIf * * childObject ) {
    int _result = 0;
    HRESULT _hr = raw_createChild(objType, objName, childObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQAttributeIfPtr IiQObjectIf::getAttributeIf ( _bstr_t id ) {
    struct IiQAttributeIf * _result = 0;
    HRESULT _hr = raw_getAttributeIf(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQAttributeIfPtr(_result, false);
}

inline int IiQObjectIf::compareAttributes ( struct IiQObjectIf * obj, int compareMode, int compareCategories ) {
    int _result = 0;
    HRESULT _hr = raw_compareAttributes(obj, compareMode, compareCategories, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IiQObjectIf::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IiQObjectIf::isKindOf ( _bstr_t ClassName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isKindOf(ClassName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IiQLicenseIf wrapper method implementations
//

inline _bstr_t IiQLicenseIf::Getproduct ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_product(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IiQLicenseIf::Getversion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IiQLicenseIf::GetsystemID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_systemID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IiQLicenseIf::GetendDate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_endDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IiQLicenseIf::GetsecurityLevel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_securityLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IiQLicenseManagerIf wrapper method implementations
//

inline long IiQLicenseManagerIf::check ( _bstr_t product, int versMajor, int secLevel, int * info ) {
    long _result = 0;
    HRESULT _hr = raw_check(product, versMajor, secLevel, info, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLicenseManagerIf::getNumLicenses ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumLicenses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQLicenseIfPtr IiQLicenseManagerIf::getLicense ( int licNo ) {
    struct IiQLicenseIf * _result = 0;
    HRESULT _hr = raw_getLicense(licNo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQLicenseIfPtr(_result, false);
}

inline long IiQLicenseManagerIf::addLicense ( _bstr_t licStr ) {
    long _result = 0;
    HRESULT _hr = raw_addLicense(licStr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IiQLicenseManagerIf::deleteLicense ( int licNo ) {
    long _result = 0;
    HRESULT _hr = raw_deleteLicense(licNo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IiQLicenseManagerIf::checkTrust ( ) {
    long _result = 0;
    HRESULT _hr = raw_checkTrust(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IiQLicenseManagerIf::getTrustInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTrustInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IiQLicenseManagerIf::resetTrust ( _bstr_t trustStr ) {
    long _result = 0;
    HRESULT _hr = raw_resetTrust(trustStr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IiQLibIf wrapper method implementations
//

inline int IiQLibIf::load ( _bstr_t fileName ) {
    int _result = 0;
    HRESULT _hr = raw_load(fileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::save ( ) {
    int _result = 0;
    HRESULT _hr = raw_save(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::saveAs ( _bstr_t fileName ) {
    int _result = 0;
    HRESULT _hr = raw_saveAs(fileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getAttribute ( _bstr_t id, BSTR * content ) {
    int _result = 0;
    HRESULT _hr = raw_getAttribute(id, content, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::setAttribute ( _bstr_t id, _bstr_t content ) {
    int _result = 0;
    HRESULT _hr = raw_setAttribute(id, content, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNumScans ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IiQLibIf::getScanLoadState ( int scan ) {
    long _result = 0;
    HRESULT _hr = raw_getScanLoadState(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::loadScan ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_loadScan(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::unloadScan ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_unloadScan(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getScanNumRows ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_getScanNumRows(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getScanNumCols ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_getScanNumCols(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getScanPoint ( int scan, int row, int col, double * x, double * y, double * z, int * refl ) {
    int _result = 0;
    HRESULT _hr = raw_getScanPoint(scan, row, col, x, y, z, refl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getScanPosition ( int scan, double * x, double * y, double * z ) {
    int _result = 0;
    HRESULT _hr = raw_getScanPosition(scan, x, y, z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getScanOrientation ( int scan, double * x, double * y, double * z, double * angle ) {
    int _result = 0;
    HRESULT _hr = raw_getScanOrientation(scan, x, y, z, angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getCalibVersion ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_getCalibVersion(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::setCalibVersion ( int scan, int n ) {
    int _result = 0;
    HRESULT _hr = raw_setCalibVersion(scan, n, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IiQObjectIfPtr IiQLibIf::getRootObject ( ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getRootObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline IiQObjectIfPtr IiQLibIf::getScanObject ( int scanNb ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getScanObject(scanNb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline int IiQLibIf::extractStream ( _bstr_t fileIn, _bstr_t stream, _bstr_t fileOut ) {
    int _result = 0;
    HRESULT _hr = raw_extractStream(fileIn, stream, fileOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getXYZScanPoints ( int scan, int row, int col, int numRows, double * pos, int * reflections ) {
    int _result = 0;
    HRESULT _hr = raw_getXYZScanPoints(scan, row, col, numRows, pos, reflections, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getPolarScanPoints ( int scan, int row, int col, int numRows, double * pos, int * reflections ) {
    int _result = 0;
    HRESULT _hr = raw_getPolarScanPoints(scan, row, col, numRows, pos, reflections, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::setStream ( _bstr_t sfile, _bstr_t stream, _bstr_t newPart ) {
    int _result = 0;
    HRESULT _hr = raw_setStream(sfile, stream, newPart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IiQLibIf::getLibVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLibVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IiQLibIf::getSocketVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSocketVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IiQLibIf::GetscanReflectionMode ( ) {
    long _result = 0;
    HRESULT _hr = get_scanReflectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQLibIf::PutscanReflectionMode ( long pVal ) {
    HRESULT _hr = put_scanReflectionMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IiQLibIf::setMinimizeMemoryDemand ( long flag ) {
    HRESULT _hr = raw_setMinimizeMemoryDemand(flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IiQLicenseManagerIfPtr IiQLibIf::getLicenseManager ( _bstr_t product, int versMajor ) {
    struct IiQLicenseManagerIf * _result = 0;
    HRESULT _hr = raw_getLicenseManager(product, versMajor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQLicenseManagerIfPtr(_result, false);
}

inline IiQAttributeIfPtr IiQLibIf::getAttributeIf ( _bstr_t id ) {
    struct IiQAttributeIf * _result = 0;
    HRESULT _hr = raw_getAttributeIf(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQAttributeIfPtr(_result, false);
}

inline _bstr_t IiQLibIf::getExceptionMsg ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getExceptionMsg(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IiQLibIf::getNumberExceptions ( ) {
    int _result = 0;
    HRESULT _hr = raw_getNumberExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQLibIf::PutLoadOnlyWorkspaceFlag ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_LoadOnlyWorkspaceFlag(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IiQObjectIfPtr IiQLibIf::getObject ( _bstr_t id ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_getObject(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline VARIANT_BOOL IiQLibIf::GetBlockExceptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQLibIf::PutBlockExceptions ( VARIANT_BOOL bBlock ) {
    HRESULT _hr = put_BlockExceptions(bBlock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IiQLibIf::GetBlockProgressBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockProgressBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQLibIf::PutBlockProgressBars ( VARIANT_BOOL bBlock ) {
    HRESULT _hr = put_BlockProgressBars(bBlock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IiQLibIf::GetBlockDialogs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockDialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IiQLibIf::PutBlockDialogs ( VARIANT_BOOL bBlock ) {
    HRESULT _hr = put_BlockDialogs(bBlock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IiQSelectionBorderIfPtr IiQLibIf::getSelectionBorderIf ( ) {
    struct IiQSelectionBorderIf * _result = 0;
    HRESULT _hr = raw_getSelectionBorderIf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQSelectionBorderIfPtr(_result, false);
}

inline IiQObjectIfPtr IiQLibIf::createObject ( _bstr_t objType ) {
    struct IiQObjectIf * _result = 0;
    HRESULT _hr = raw_createObject(objType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IiQObjectIfPtr(_result, false);
}

inline int IiQLibIf::getXYZScanPoints2 ( int scan, int row, int col, int numRows, SAFEARRAY * * pos, SAFEARRAY * * reflections ) {
    int _result = 0;
    HRESULT _hr = raw_getXYZScanPoints2(scan, row, col, numRows, pos, reflections, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getPolarScanPoints2 ( int scan, int row, int col, int numRows, SAFEARRAY * * pos, SAFEARRAY * * reflections ) {
    int _result = 0;
    HRESULT _hr = raw_getPolarScanPoints2(scan, row, col, numRows, pos, reflections, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFAROScanAnglesIfPtr IiQLibIf::getScanAnglesIf ( int scanNb ) {
    struct IFAROScanAnglesIf * _result = 0;
    HRESULT _hr = raw_getScanAnglesIf(scanNb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFAROScanAnglesIfPtr(_result, false);
}

inline HRESULT IiQLibIf::setFirstLoadFilter ( long flag ) {
    HRESULT _hr = raw_setFirstLoadFilter(flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int IiQLibIf::clearExceptions ( ) {
    int _result = 0;
    HRESULT _hr = raw_clearExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::enableLogFile ( _bstr_t filePath, int log_level ) {
    int _result = 0;
    HRESULT _hr = raw_enableLogFile(filePath, log_level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::disableLogFile ( ) {
    int _result = 0;
    HRESULT _hr = raw_disableLogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNumAutomationMessages ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_getNumAutomationMessages(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getAutomationMessage ( int scan, int messageNr, unsigned __int64 * atime, unsigned int * canId, unsigned int * dataHigh, unsigned int * dataLow ) {
    int _result = 0;
    HRESULT _hr = raw_getAutomationMessage(scan, messageNr, atime, canId, dataHigh, dataLow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getPreviousAutomationMessage ( int scan, unsigned __int64 atime ) {
    int _result = 0;
    HRESULT _hr = raw_getPreviousAutomationMessage(scan, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNextAutomationMessage ( int scan, unsigned __int64 atime ) {
    int _result = 0;
    HRESULT _hr = raw_getNextAutomationMessage(scan, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNumAutomationTriggers ( int scan ) {
    int _result = 0;
    HRESULT _hr = raw_getNumAutomationTriggers(scan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getAutomationTriggerTime ( int scan, int triggerNr, unsigned __int64 * atime ) {
    int _result = 0;
    HRESULT _hr = raw_getAutomationTriggerTime(scan, triggerNr, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getPreviousAutomationTrigger ( int scan, unsigned __int64 atime ) {
    int _result = 0;
    HRESULT _hr = raw_getPreviousAutomationTrigger(scan, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNextAutomationTrigger ( int scan, unsigned __int64 atime ) {
    int _result = 0;
    HRESULT _hr = raw_getNextAutomationTrigger(scan, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getNearestScanPointFromAutomationTime ( int scan, unsigned __int64 atime, int * row, int * col ) {
    int _result = 0;
    HRESULT _hr = raw_getNearestScanPointFromAutomationTime(scan, atime, row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IiQLibIf::getAutomationTimeOfScanPoint ( int scan, int row, int col, unsigned __int64 * atime ) {
    int _result = 0;
    HRESULT _hr = raw_getAutomationTimeOfScanPoint(scan, row, col, atime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IiQLibIf::GetBuildType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BuildType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
