// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (a535a509).
//
// d:\documents\3d systems korea\development\issues\controlx\gv-5647\new\faroopendemoapp\x64\debug\iqopen.tlh
//
// C++ source equivalent of type library C:\Windows\WinSxS\amd64_faro.ls_1d23f5635ba800ab_1.1.701.1_none_3591adaf356ae9b1\iQOpen.dll
// compiler-generated file created 03/27/18 at 11:39:57 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("c3920e00-2710-4ef7-8d7c-d7590098bd4d"))
/* LIBID */ __IQOPENLib;
struct __declspec(uuid("2e2092cf-6741-4f76-8902-20a313de108f"))
/* dual interface */ IiQLicensedInterfaceIf;
struct __declspec(uuid("06a51a38-450d-4de3-874c-c609e4061e5c"))
/* dual interface */ IiQScanFitObjIf;
struct /* coclass */ iQScanFitObjIf;
struct __declspec(uuid("19497743-0dd2-48bf-83ae-1f5eadfb3602"))
/* dispinterface */ _IiQScanFitObjIfEvents;
struct __declspec(uuid("5d9394d0-b09b-4e56-8889-cc193d7f105c"))
/* dual interface */ IiQFitObjIf;
struct /* coclass */ iQFitObjIf;
struct __declspec(uuid("eb88458f-fb18-4164-9e23-35f672cb22bd"))
/* dispinterface */ _IiQFitObjIfEvents;
struct __declspec(uuid("19b43b35-d74e-470b-810e-0d3281433355"))
/* dual interface */ IFAROScanAnglesIf;
struct /* coclass */ FAROScanAnglesIf;
struct __declspec(uuid("96f238dd-4f95-4a13-a94b-e752d99c0355"))
/* dual interface */ IiQScanObjIf;
struct /* coclass */ iQScanObjIf;
struct __declspec(uuid("2c7f21a8-ea0b-43d3-b317-a067c848cacb"))
/* dispinterface */ _IiQScanObjIfEvents;
struct __declspec(uuid("4537a337-23f9-47be-bd00-0a3de6227027"))
/* dual interface */ IiQSphereObjIf;
struct /* coclass */ iQSphereObjIf;
struct __declspec(uuid("63b60a2c-7f80-48b3-aaff-7282379ab8f9"))
/* dispinterface */ _IiQSphereObjIfEvents;
struct __declspec(uuid("71d0219d-d4fd-4f12-b934-834bdda85d42"))
/* dual interface */ IiQSelectionBorderIf;
struct /* coclass */ iQSelectionBorderIf;
struct __declspec(uuid("35a431ae-240a-4c12-925e-b0117aceaf5a"))
/* dispinterface */ _IiQSelectionBorderIfEvents;
struct __declspec(uuid("e6954e73-5df3-4af2-8980-38763e189675"))
/* dual interface */ IiQAttributeIf;
struct /* coclass */ iQAttributeIf;
struct __declspec(uuid("9c0c326d-d3fa-44ea-b94e-b13d43f42997"))
/* dispinterface */ _IiQAttributeIfEvents;
struct __declspec(uuid("3b6a0dd9-002e-4034-8de7-479cd1f188a5"))
/* dual interface */ IiQObjectIf;
struct /* coclass */ iQObjectIf;
struct __declspec(uuid("e6c80a5e-f4fd-4942-8318-422f863f4db3"))
/* dispinterface */ _IiQObjectIfEvents;
struct __declspec(uuid("92649cb6-ce01-400b-b639-76a299495bde"))
/* dual interface */ IiQLicenseIf;
struct /* coclass */ iQLicenseIf;
struct __declspec(uuid("67ab7319-400f-4636-91bd-68c5280ef306"))
/* dual interface */ IiQLicenseManagerIf;
struct /* coclass */ iQLicenseManagerIf;
struct __declspec(uuid("5ebd614f-5f04-4197-b89d-a6fd2968bb94"))
/* dispinterface */ _IiQLicenseManagerIfEvents;
struct __declspec(uuid("04c30767-2e10-4231-802b-f9df2d5f8c5b"))
/* dual interface */ IiQLibIf;
struct /* coclass */ iQLibIf;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IiQLicensedInterfaceIf, __uuidof(IiQLicensedInterfaceIf));
_COM_SMARTPTR_TYPEDEF(IiQScanFitObjIf, __uuidof(IiQScanFitObjIf));
_COM_SMARTPTR_TYPEDEF(_IiQScanFitObjIfEvents, __uuidof(_IiQScanFitObjIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQFitObjIf, __uuidof(IiQFitObjIf));
_COM_SMARTPTR_TYPEDEF(_IiQFitObjIfEvents, __uuidof(_IiQFitObjIfEvents));
_COM_SMARTPTR_TYPEDEF(IFAROScanAnglesIf, __uuidof(IFAROScanAnglesIf));
_COM_SMARTPTR_TYPEDEF(IiQScanObjIf, __uuidof(IiQScanObjIf));
_COM_SMARTPTR_TYPEDEF(_IiQScanObjIfEvents, __uuidof(_IiQScanObjIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQSphereObjIf, __uuidof(IiQSphereObjIf));
_COM_SMARTPTR_TYPEDEF(_IiQSphereObjIfEvents, __uuidof(_IiQSphereObjIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQSelectionBorderIf, __uuidof(IiQSelectionBorderIf));
_COM_SMARTPTR_TYPEDEF(_IiQSelectionBorderIfEvents, __uuidof(_IiQSelectionBorderIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQAttributeIf, __uuidof(IiQAttributeIf));
_COM_SMARTPTR_TYPEDEF(_IiQAttributeIfEvents, __uuidof(_IiQAttributeIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQObjectIf, __uuidof(IiQObjectIf));
_COM_SMARTPTR_TYPEDEF(_IiQObjectIfEvents, __uuidof(_IiQObjectIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQLicenseIf, __uuidof(IiQLicenseIf));
_COM_SMARTPTR_TYPEDEF(IiQLicenseManagerIf, __uuidof(IiQLicenseManagerIf));
_COM_SMARTPTR_TYPEDEF(_IiQLicenseManagerIfEvents, __uuidof(_IiQLicenseManagerIfEvents));
_COM_SMARTPTR_TYPEDEF(IiQLibIf, __uuidof(IiQLibIf));

//
// Type library items
//

struct __declspec(uuid("2e2092cf-6741-4f76-8902-20a313de108f"))
IiQLicensedInterfaceIf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLicense,put=PutLicense))
    _bstr_t License;

    //
    // Wrapper methods for error-handling
    //

    void PutLicense (
        _bstr_t License );
    _bstr_t GetLicense ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_License (
        /*[in]*/ BSTR License ) = 0;
      virtual HRESULT __stdcall get_License (
        /*[out,retval]*/ BSTR * License ) = 0;
};

struct __declspec(uuid("06a51a38-450d-4de3-874c-c609e4061e5c"))
IiQScanFitObjIf : IiQLicensedInterfaceIf
{};

struct __declspec(uuid("cd23cba4-bcbe-4cea-91e4-5815d1e4cb19"))
iQScanFitObjIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQScanFitObjIf
    // [ default, source ] dispinterface _IiQScanFitObjIfEvents

struct __declspec(uuid("19497743-0dd2-48bf-83ae-1f5eadfb3602"))
_IiQScanFitObjIfEvents : IDispatch
{};

struct __declspec(uuid("5d9394d0-b09b-4e56-8889-cc193d7f105c"))
IiQFitObjIf : IiQLicensedInterfaceIf
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL isScanFitObj ( );
    IiQScanFitObjIfPtr getScanFitObjSpecificIf ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_isScanFitObj (
        /*[out,retval]*/ VARIANT_BOOL * isScanFit ) = 0;
      virtual HRESULT __stdcall raw_getScanFitObjSpecificIf (
        /*[out,retval]*/ struct IiQScanFitObjIf * * scanFitIf ) = 0;
};

struct __declspec(uuid("92d646e3-5681-48da-a5f3-40397541eee9"))
iQFitObjIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQFitObjIf
    // [ default, source ] dispinterface _IiQFitObjIfEvents

struct __declspec(uuid("eb88458f-fb18-4164-9e23-35f672cb22bd"))
_IiQFitObjIfEvents : IDispatch
{};

struct __declspec(uuid("19b43b35-d74e-470b-810e-0d3281433355"))
IFAROScanAnglesIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetColEndFrontSight))
    int ColEndFrontSight;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL getHorizontalAngles (
        int col,
        double * start,
        double * delta );
    VARIANT_BOOL getVerticalAngles (
        int col,
        double * top,
        double * delta );
    int GetColEndFrontSight ( );
    VARIANT_BOOL getHorizontalIndices (
        int col,
        double * start,
        double * delta );
    VARIANT_BOOL getHorizontalAngle (
        int row,
        int col,
        double * phi );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getHorizontalAngles (
        /*[in]*/ int col,
        /*[out]*/ double * start,
        /*[out]*/ double * delta,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAngles (
        /*[in]*/ int col,
        /*[out]*/ double * top,
        /*[out]*/ double * delta,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall get_ColEndFrontSight (
        /*[out,retval]*/ int * col ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalIndices (
        /*[in]*/ int col,
        /*[out]*/ double * start,
        /*[out]*/ double * delta,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAngle (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ double * phi,
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
};

struct __declspec(uuid("40081069-b228-4580-ad1e-e29a602ac46f"))
FAROScanAnglesIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IFAROScanAnglesIf

struct __declspec(uuid("96f238dd-4f95-4a13-a94b-e752d99c0355"))
IiQScanObjIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetscanReflectionMode,put=PutscanReflectionMode))
    long scanReflectionMode;
    __declspec(property(put=PutActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    int getNumRows ( );
    int getNumCols ( );
    int getPosition (
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL globalTrafo );
    int getOrientation (
        double * x,
        double * y,
        double * z,
        double * angle,
        VARIANT_BOOL globalTrafo );
    int getScanPointCartGlobal (
        int row,
        int col,
        double * x,
        double * y,
        double * z,
        int * refl );
    int getDate (
        int * scanYear,
        int * scanMonth,
        int * scanDay,
        int * scanHour,
        int * scanMin,
        int * scanSec,
        int * scanMSec );
    int getHardwareInfo (
        BSTR * hwID,
        BSTR * hwType,
        BSTR * hwSerial,
        BSTR * hwInfo,
        double * hwRange );
    int getException ( );
    long getLoadState ( );
    int load ( );
    int unload ( );
    int getScanPointPolar (
        int row,
        int col,
        double * phi,
        double * theta,
        double * dist,
        int * refl );
    int placeScan ( );
    int setHardwareInfo (
        _bstr_t hwID,
        _bstr_t hwType,
        _bstr_t hwSerial,
        _bstr_t hwInfo,
        double hwRange );
    IFAROScanAnglesIfPtr getAnglesIf ( );
    int getCalibFileName (
        BSTR * fileName );
    int getCalibInfo (
        double * distOffset,
        double * distFactor,
        double * mirrorAdjustment,
        double * mirrorAxisAdjustment,
        double * horLaserAdjustment,
        double * vertLaserAdjustment,
        double * addtlAmplOffset,
        double * addtlAmplFactor,
        double * distCalibAngle,
        double * distCalibLength,
        double * triggerOffset );
    long GetscanReflectionMode ( );
    void PutscanReflectionMode (
        long pVal );
    int getColRow (
        int * col,
        int * row,
        double x,
        double y,
        double z );
    void PutActive (
        VARIANT_BOOL _arg1 );
    int getInclinometerAxis (
        double * x,
        double * y,
        double * z );
    int getCompassAxis (
        double * x,
        double * y,
        double * z );
    int getAltimeterHeight (
        double * height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getNumRows (
        /*[out,retval]*/ int * numRows ) = 0;
      virtual HRESULT __stdcall raw_getNumCols (
        /*[out,retval]*/ int * numCols ) = 0;
      virtual HRESULT __stdcall raw_getPosition (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[in]*/ VARIANT_BOOL globalTrafo,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getOrientation (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ double * angle,
        /*[in]*/ VARIANT_BOOL globalTrafo,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanPointCartGlobal (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ int * refl,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getDate (
        /*[out]*/ int * scanYear,
        /*[out]*/ int * scanMonth,
        /*[out]*/ int * scanDay,
        /*[out]*/ int * scanHour,
        /*[out]*/ int * scanMin,
        /*[out]*/ int * scanSec,
        /*[out]*/ int * scanMSec,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getHardwareInfo (
        /*[out]*/ BSTR * hwID,
        /*[out]*/ BSTR * hwType,
        /*[out]*/ BSTR * hwSerial,
        /*[out]*/ BSTR * hwInfo,
        /*[out]*/ double * hwRange,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getException (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getLoadState (
        /*[out,retval]*/ long * loadState ) = 0;
      virtual HRESULT __stdcall raw_load (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_unload (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanPointPolar (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ double * phi,
        /*[out]*/ double * theta,
        /*[out]*/ double * dist,
        /*[out]*/ int * refl,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_placeScan (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setHardwareInfo (
        /*[in]*/ BSTR hwID,
        /*[in]*/ BSTR hwType,
        /*[in]*/ BSTR hwSerial,
        /*[in]*/ BSTR hwInfo,
        /*[in]*/ double hwRange,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAnglesIf (
        /*[out,retval]*/ struct IFAROScanAnglesIf * * anglesIf ) = 0;
      virtual HRESULT __stdcall raw_getCalibFileName (
        /*[out]*/ BSTR * fileName,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getCalibInfo (
        /*[out]*/ double * distOffset,
        /*[out]*/ double * distFactor,
        /*[out]*/ double * mirrorAdjustment,
        /*[out]*/ double * mirrorAxisAdjustment,
        /*[out]*/ double * horLaserAdjustment,
        /*[out]*/ double * vertLaserAdjustment,
        /*[out]*/ double * addtlAmplOffset,
        /*[out]*/ double * addtlAmplFactor,
        /*[out]*/ double * distCalibAngle,
        /*[out]*/ double * distCalibLength,
        /*[out]*/ double * triggerOffset,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall get_scanReflectionMode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_scanReflectionMode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_getColRow (
        /*[out]*/ int * col,
        /*[out]*/ int * row,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_getInclinometerAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getCompassAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAltimeterHeight (
        /*[out]*/ double * height,
        /*[out,retval]*/ int * result ) = 0;
};

struct __declspec(uuid("147f512a-ac1e-472e-b04f-501963ff04f5"))
iQScanObjIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQScanObjIf
    // [ default, source ] dispinterface _IiQScanObjIfEvents

struct __declspec(uuid("2c7f21a8-ea0b-43d3-b317-a067c848cacb"))
_IiQScanObjIfEvents : IDispatch
{};

struct __declspec(uuid("4537a337-23f9-47be-bd00-0a3de6227027"))
IiQSphereObjIf : IiQLicensedInterfaceIf
{
    //
    // Wrapper methods for error-handling
    //

    int getPosition (
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL globalTrafo );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getPosition (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[in]*/ VARIANT_BOOL globalTrafo,
        /*[out,retval]*/ int * result ) = 0;
};

struct __declspec(uuid("22110bda-ead0-4412-bd7b-e98426658b2b"))
iQSphereObjIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQSphereObjIf
    // [ default, source ] dispinterface _IiQSphereObjIfEvents

struct __declspec(uuid("63b60a2c-7f80-48b3-aaff-7282379ab8f9"))
_IiQSphereObjIfEvents : IDispatch
{};

struct __declspec(uuid("71d0219d-d4fd-4f12-b934-834bdda85d42"))
IiQSelectionBorderIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    int SelectionMode;
    __declspec(property(get=GetSelectionType,put=PutSelectionType))
    _bstr_t SelectionType;

    //
    // Wrapper methods for error-handling
    //

    HRESULT addPoint (
        int row,
        int col );
    HRESULT clearPoints ( );
    void PutSelectionMode (
        int SelectionMode );
    int GetSelectionMode ( );
    void PutSelectionType (
        _bstr_t SelectionType );
    _bstr_t GetSelectionType ( );
    HRESULT apply ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_addPoint (
        /*[in]*/ int row,
        /*[in]*/ int col ) = 0;
      virtual HRESULT __stdcall raw_clearPoints ( ) = 0;
      virtual HRESULT __stdcall put_SelectionMode (
        /*[in]*/ int SelectionMode ) = 0;
      virtual HRESULT __stdcall get_SelectionMode (
        /*[out,retval]*/ int * SelectionMode ) = 0;
      virtual HRESULT __stdcall put_SelectionType (
        /*[in]*/ BSTR SelectionType ) = 0;
      virtual HRESULT __stdcall get_SelectionType (
        /*[out,retval]*/ BSTR * SelectionType ) = 0;
      virtual HRESULT __stdcall raw_apply ( ) = 0;
};

struct __declspec(uuid("4e4d0926-8cf7-4eca-8198-0417d8b6cde9"))
iQSelectionBorderIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQSelectionBorderIf
    // [ default, source ] dispinterface _IiQSelectionBorderIfEvents

struct __declspec(uuid("35a431ae-240a-4c12-925e-b0117aceaf5a"))
_IiQSelectionBorderIfEvents : IDispatch
{};

struct __declspec(uuid("e6954e73-5df3-4af2-8980-38763e189675"))
IiQAttributeIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetNumMatches,put=PutNumMatches))
    int NumMatches;
    __declspec(property(get=GetNumMatchCandidates))
    int NumMatchCandidates;

    //
    // Wrapper methods for error-handling
    //

    int setValue (
        _bstr_t value );
    int setValueAndWaitForMatch (
        _bstr_t value,
        struct IiQAttributeIf * observedAttribute,
        double timeOut );
    _bstr_t getValue ( );
    HRESULT addInfo (
        _bstr_t key,
        _bstr_t value );
    HRESULT clearInfos ( );
    _bstr_t getInfoByKey (
        _bstr_t key );
    unsigned long getNumberInfos ( );
    int GetNumMatches ( );
    void PutNumMatches (
        int NumMatches );
    HRESULT addMatchCandidate (
        _bstr_t candidate );
    _bstr_t getMatchCandidate (
        int index );
    int GetNumMatchCandidates ( );
    HRESULT clearMatchCandidates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setValue (
        /*[in]*/ BSTR value,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setValueAndWaitForMatch (
        /*[in]*/ BSTR value,
        /*[in]*/ struct IiQAttributeIf * observedAttribute,
        /*[in]*/ double timeOut,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getValue (
        /*[out,retval]*/ BSTR * value ) = 0;
      virtual HRESULT __stdcall raw_addInfo (
        /*[in]*/ BSTR key,
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_clearInfos ( ) = 0;
      virtual HRESULT __stdcall raw_getInfoByKey (
        /*[in]*/ BSTR key,
        /*[out,retval]*/ BSTR * value ) = 0;
      virtual HRESULT __stdcall raw_getNumberInfos (
        /*[out,retval]*/ unsigned long * number ) = 0;
      virtual HRESULT __stdcall get_NumMatches (
        /*[out,retval]*/ int * NumMatches ) = 0;
      virtual HRESULT __stdcall put_NumMatches (
        /*[in]*/ int NumMatches ) = 0;
      virtual HRESULT __stdcall raw_addMatchCandidate (
        /*[in]*/ BSTR candidate ) = 0;
      virtual HRESULT __stdcall raw_getMatchCandidate (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * candidate ) = 0;
      virtual HRESULT __stdcall get_NumMatchCandidates (
        /*[out,retval]*/ int * NumMatchCandidates ) = 0;
      virtual HRESULT __stdcall raw_clearMatchCandidates ( ) = 0;
};

struct __declspec(uuid("fbaa4bd0-11cd-479c-a151-f0c0603f0316"))
iQAttributeIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQAttributeIf
    // [ default, source ] dispinterface _IiQAttributeIfEvents

struct __declspec(uuid("9c0c326d-d3fa-44ea-b94e-b13d43f42997"))
_IiQAttributeIfEvents : IDispatch
{};

struct __declspec(uuid("3b6a0dd9-002e-4034-8de7-479cd1f188a5"))
IiQObjectIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetClassName))
    _bstr_t ClassName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t getName ( );
    int getNumChildren ( );
    IiQObjectIfPtr getChild (
        int childNb );
    IiQObjectIfPtr getParent ( );
    int getNumAttributes ( );
    IiQScanObjIfPtr getScanObjSpecificIf ( );
    VARIANT_BOOL isScanObj ( );
    VARIANT_BOOL isFitObj ( );
    IiQFitObjIfPtr getFitObjSpecificIf ( );
    IiQObjectIfPtr getActiveFitObjIf ( );
    int getAttribute (
        _bstr_t id,
        BSTR * content );
    int setAttribute (
        _bstr_t id,
        _bstr_t content );
    VARIANT_BOOL hasActiveFitObjIf ( );
    int setName (
        _bstr_t objName );
    IiQSphereObjIfPtr getSphereObjSpecificIf ( );
    VARIANT_BOOL isSphereObj ( );
    int createChild (
        _bstr_t objType,
        _bstr_t objName,
        struct IiQObjectIf * * childObject );
    IiQAttributeIfPtr getAttributeIf (
        _bstr_t id );
    int compareAttributes (
        struct IiQObjectIf * obj,
        int compareMode,
        int compareCategories );
    _bstr_t GetClassName ( );
    VARIANT_BOOL isKindOf (
        _bstr_t ClassName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * objName ) = 0;
      virtual HRESULT __stdcall raw_getNumChildren (
        /*[out,retval]*/ int * numChildren ) = 0;
      virtual HRESULT __stdcall raw_getChild (
        /*[in]*/ int childNb,
        /*[out,retval]*/ struct IiQObjectIf * * childObject ) = 0;
      virtual HRESULT __stdcall raw_getParent (
        /*[out,retval]*/ struct IiQObjectIf * * parentObject ) = 0;
      virtual HRESULT __stdcall raw_getNumAttributes (
        /*[out,retval]*/ int * numAttributes ) = 0;
      virtual HRESULT __stdcall raw_getScanObjSpecificIf (
        /*[out,retval]*/ struct IiQScanObjIf * * scanIf ) = 0;
      virtual HRESULT __stdcall raw_isScanObj (
        /*[out,retval]*/ VARIANT_BOOL * isScan ) = 0;
      virtual HRESULT __stdcall raw_isFitObj (
        /*[out,retval]*/ VARIANT_BOOL * isFit ) = 0;
      virtual HRESULT __stdcall raw_getFitObjSpecificIf (
        /*[out,retval]*/ struct IiQFitObjIf * * fitIf ) = 0;
      virtual HRESULT __stdcall raw_getActiveFitObjIf (
        /*[out,retval]*/ struct IiQObjectIf * * activeFitObjIf ) = 0;
      virtual HRESULT __stdcall raw_getAttribute (
        /*[in]*/ BSTR id,
        /*[out]*/ BSTR * content,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setAttribute (
        /*[in]*/ BSTR id,
        /*[in]*/ BSTR content,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_hasActiveFitObjIf (
        /*[out,retval]*/ VARIANT_BOOL * hasIf ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR objName,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getSphereObjSpecificIf (
        /*[out,retval]*/ struct IiQSphereObjIf * * sphereIf ) = 0;
      virtual HRESULT __stdcall raw_isSphereObj (
        /*[out,retval]*/ VARIANT_BOOL * isSphere ) = 0;
      virtual HRESULT __stdcall raw_createChild (
        /*[in]*/ BSTR objType,
        /*[in]*/ BSTR objName,
        /*[out]*/ struct IiQObjectIf * * childObject,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAttributeIf (
        /*[in]*/ BSTR id,
        /*[out,retval]*/ struct IiQAttributeIf * * attrIf ) = 0;
      virtual HRESULT __stdcall raw_compareAttributes (
        /*[in]*/ struct IiQObjectIf * obj,
        /*[in]*/ int compareMode,
        /*[in]*/ int compareCategories,
        /*[out,retval]*/ int * numDifferences ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * ClassName ) = 0;
      virtual HRESULT __stdcall raw_isKindOf (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ VARIANT_BOOL * isKind ) = 0;
};

struct __declspec(uuid("86a98bf5-3ace-4c23-b863-7eb416393f2f"))
iQObjectIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQObjectIf
    // [ default, source ] dispinterface _IiQObjectIfEvents

struct __declspec(uuid("e6c80a5e-f4fd-4942-8318-422f863f4db3"))
_IiQObjectIfEvents : IDispatch
{};

struct __declspec(uuid("92649cb6-ce01-400b-b639-76a299495bde"))
IiQLicenseIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=Getproduct))
    _bstr_t product;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=GetsystemID))
    _bstr_t systemID;
    __declspec(property(get=GetendDate))
    _bstr_t endDate;
    __declspec(property(get=GetsecurityLevel))
    _bstr_t securityLevel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getproduct ( );
    _bstr_t Getversion ( );
    _bstr_t GetsystemID ( );
    _bstr_t GetendDate ( );
    _bstr_t GetsecurityLevel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_product (
        /*[out,retval]*/ BSTR * s ) = 0;
      virtual HRESULT __stdcall get_version (
        /*[out,retval]*/ BSTR * s ) = 0;
      virtual HRESULT __stdcall get_systemID (
        /*[out,retval]*/ BSTR * s ) = 0;
      virtual HRESULT __stdcall get_endDate (
        /*[out,retval]*/ BSTR * s ) = 0;
      virtual HRESULT __stdcall get_securityLevel (
        /*[out,retval]*/ BSTR * s ) = 0;
};

struct __declspec(uuid("76eeb05f-545b-441f-a5de-3c58aefa4fc7"))
iQLicenseIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQLicenseIf

struct __declspec(uuid("67ab7319-400f-4636-91bd-68c5280ef306"))
IiQLicenseManagerIf : IiQLicensedInterfaceIf
{
    //
    // Wrapper methods for error-handling
    //

    long check (
        _bstr_t product,
        int versMajor,
        int secLevel,
        int * info );
    int getNumLicenses ( );
    IiQLicenseIfPtr getLicense (
        int licNo );
    long addLicense (
        _bstr_t licStr );
    long deleteLicense (
        int licNo );
    long checkTrust ( );
    _bstr_t getTrustInfo ( );
    long resetTrust (
        _bstr_t trustStr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_check (
        /*[in]*/ BSTR product,
        /*[in]*/ int versMajor,
        /*[in]*/ int secLevel,
        /*[out]*/ int * info,
        /*[out,retval]*/ long * success ) = 0;
      virtual HRESULT __stdcall raw_getNumLicenses (
        /*[out,retval]*/ int * numLicenses ) = 0;
      virtual HRESULT __stdcall raw_getLicense (
        /*[in]*/ int licNo,
        /*[out,retval]*/ struct IiQLicenseIf * * License ) = 0;
      virtual HRESULT __stdcall raw_addLicense (
        /*[in]*/ BSTR licStr,
        /*[out,retval]*/ long * success ) = 0;
      virtual HRESULT __stdcall raw_deleteLicense (
        /*[in]*/ int licNo,
        /*[out,retval]*/ long * success ) = 0;
      virtual HRESULT __stdcall raw_checkTrust (
        /*[out,retval]*/ long * success ) = 0;
      virtual HRESULT __stdcall raw_getTrustInfo (
        /*[out,retval]*/ BSTR * trustInfo ) = 0;
      virtual HRESULT __stdcall raw_resetTrust (
        /*[in]*/ BSTR trustStr,
        /*[out,retval]*/ long * success ) = 0;
};

struct __declspec(uuid("a853878a-d613-4b14-aabe-61a1334ece9e"))
iQLicenseManagerIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQLicenseManagerIf
    // [ default, source ] dispinterface _IiQLicenseManagerIfEvents

struct __declspec(uuid("5ebd614f-5f04-4197-b89d-a6fd2968bb94"))
_IiQLicenseManagerIfEvents : IDispatch
{};

struct __declspec(uuid("04c30767-2e10-4231-802b-f9df2d5f8c5b"))
IiQLibIf : IiQLicensedInterfaceIf
{
    //
    // Property data
    //

    __declspec(property(get=GetBlockExceptions,put=PutBlockExceptions))
    VARIANT_BOOL BlockExceptions;
    __declspec(property(get=GetBlockProgressBars,put=PutBlockProgressBars))
    VARIANT_BOOL BlockProgressBars;
    __declspec(property(get=GetBlockDialogs,put=PutBlockDialogs))
    VARIANT_BOOL BlockDialogs;
    __declspec(property(get=GetBuildType))
    _bstr_t BuildType;
    __declspec(property(get=GetscanReflectionMode,put=PutscanReflectionMode))
    long scanReflectionMode;
    __declspec(property(put=PutLoadOnlyWorkspaceFlag))
    VARIANT_BOOL LoadOnlyWorkspaceFlag;

    //
    // Wrapper methods for error-handling
    //

    int load (
        _bstr_t fileName );
    int save ( );
    int saveAs (
        _bstr_t fileName );
    int getAttribute (
        _bstr_t id,
        BSTR * content );
    int setAttribute (
        _bstr_t id,
        _bstr_t content );
    int getNumScans ( );
    long getScanLoadState (
        int scan );
    int loadScan (
        int scan );
    int unloadScan (
        int scan );
    int getScanNumRows (
        int scan );
    int getScanNumCols (
        int scan );
    int getScanPoint (
        int scan,
        int row,
        int col,
        double * x,
        double * y,
        double * z,
        int * refl );
    int getScanPosition (
        int scan,
        double * x,
        double * y,
        double * z );
    int getScanOrientation (
        int scan,
        double * x,
        double * y,
        double * z,
        double * angle );
    int getCalibVersion (
        int scan );
    int setCalibVersion (
        int scan,
        int n );
    IiQObjectIfPtr getRootObject ( );
    IiQObjectIfPtr getScanObject (
        int scanNb );
    int extractStream (
        _bstr_t fileIn,
        _bstr_t stream,
        _bstr_t fileOut );
    int getXYZScanPoints (
        int scan,
        int row,
        int col,
        int numRows,
        double * pos,
        int * reflections );
    int getPolarScanPoints (
        int scan,
        int row,
        int col,
        int numRows,
        double * pos,
        int * reflections );
    int setStream (
        _bstr_t sfile,
        _bstr_t stream,
        _bstr_t newPart );
    _bstr_t getLibVersion ( );
    _bstr_t getSocketVersion ( );
    long GetscanReflectionMode ( );
    void PutscanReflectionMode (
        long pVal );
    HRESULT setMinimizeMemoryDemand (
        long flag );
    IiQLicenseManagerIfPtr getLicenseManager (
        _bstr_t product,
        int versMajor );
    IiQAttributeIfPtr getAttributeIf (
        _bstr_t id );
    _bstr_t getExceptionMsg (
        int index );
    int getNumberExceptions ( );
    void PutLoadOnlyWorkspaceFlag (
        VARIANT_BOOL _arg1 );
    IiQObjectIfPtr getObject (
        _bstr_t id );
    VARIANT_BOOL GetBlockExceptions ( );
    void PutBlockExceptions (
        VARIANT_BOOL bBlock );
    VARIANT_BOOL GetBlockProgressBars ( );
    void PutBlockProgressBars (
        VARIANT_BOOL bBlock );
    VARIANT_BOOL GetBlockDialogs ( );
    void PutBlockDialogs (
        VARIANT_BOOL bBlock );
    IiQSelectionBorderIfPtr getSelectionBorderIf ( );
    IiQObjectIfPtr createObject (
        _bstr_t objType );
    int getXYZScanPoints2 (
        int scan,
        int row,
        int col,
        int numRows,
        SAFEARRAY * * pos,
        SAFEARRAY * * reflections );
    int getPolarScanPoints2 (
        int scan,
        int row,
        int col,
        int numRows,
        SAFEARRAY * * pos,
        SAFEARRAY * * reflections );
    IFAROScanAnglesIfPtr getScanAnglesIf (
        int scanNb );
    HRESULT setFirstLoadFilter (
        long flag );
    int clearExceptions ( );
    int enableLogFile (
        _bstr_t filePath,
        int log_level );
    int disableLogFile ( );
    int getNumAutomationMessages (
        int scan );
    int getAutomationMessage (
        int scan,
        int messageNr,
        unsigned __int64 * atime,
        unsigned int * canId,
        unsigned int * dataHigh,
        unsigned int * dataLow );
    int getPreviousAutomationMessage (
        int scan,
        unsigned __int64 atime );
    int getNextAutomationMessage (
        int scan,
        unsigned __int64 atime );
    int getNumAutomationTriggers (
        int scan );
    int getAutomationTriggerTime (
        int scan,
        int triggerNr,
        unsigned __int64 * atime );
    int getPreviousAutomationTrigger (
        int scan,
        unsigned __int64 atime );
    int getNextAutomationTrigger (
        int scan,
        unsigned __int64 atime );
    int getNearestScanPointFromAutomationTime (
        int scan,
        unsigned __int64 atime,
        int * row,
        int * col );
    int getAutomationTimeOfScanPoint (
        int scan,
        int row,
        int col,
        unsigned __int64 * atime );
    int getAutomationTimeOfSyncPulse (
        int scan,
        int col,
        unsigned __int64 * atime );
    _bstr_t GetBuildType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_load (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_save (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_saveAs (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAttribute (
        /*[in]*/ BSTR id,
        /*[out]*/ BSTR * content,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setAttribute (
        /*[in]*/ BSTR id,
        /*[in]*/ BSTR content,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getNumScans (
        /*[out,retval]*/ int * numScans ) = 0;
      virtual HRESULT __stdcall raw_getScanLoadState (
        /*[in]*/ int scan,
        /*[out,retval]*/ long * loadState ) = 0;
      virtual HRESULT __stdcall raw_loadScan (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_unloadScan (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanNumRows (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * numRows ) = 0;
      virtual HRESULT __stdcall raw_getScanNumCols (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * numCols ) = 0;
      virtual HRESULT __stdcall raw_getScanPoint (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ int * refl,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanPosition (
        /*[in]*/ int scan,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanOrientation (
        /*[in]*/ int scan,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ double * angle,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getCalibVersion (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setCalibVersion (
        /*[in]*/ int scan,
        /*[in]*/ int n,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getRootObject (
        /*[out,retval]*/ struct IiQObjectIf * * rootObject ) = 0;
      virtual HRESULT __stdcall raw_getScanObject (
        /*[in]*/ int scanNb,
        /*[out,retval]*/ struct IiQObjectIf * * scanObject ) = 0;
      virtual HRESULT __stdcall raw_extractStream (
        /*[in]*/ BSTR fileIn,
        /*[in]*/ BSTR stream,
        /*[in]*/ BSTR fileOut,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getXYZScanPoints (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int numRows,
        /*[out]*/ double * pos,
        /*[out]*/ int * reflections,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getPolarScanPoints (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int numRows,
        /*[out]*/ double * pos,
        /*[out]*/ int * reflections,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_setStream (
        /*[in]*/ BSTR sfile,
        /*[in]*/ BSTR stream,
        /*[in]*/ BSTR newPart,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getLibVersion (
        /*[out,retval]*/ BSTR * versionStr ) = 0;
      virtual HRESULT __stdcall raw_getSocketVersion (
        /*[out,retval]*/ BSTR * versionStr ) = 0;
      virtual HRESULT __stdcall get_scanReflectionMode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_scanReflectionMode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_setMinimizeMemoryDemand (
        /*[in]*/ long flag ) = 0;
      virtual HRESULT __stdcall raw_getLicenseManager (
        /*[in]*/ BSTR product,
        /*[in]*/ int versMajor,
        /*[out,retval]*/ struct IiQLicenseManagerIf * * licenseManager ) = 0;
      virtual HRESULT __stdcall raw_getAttributeIf (
        /*[in]*/ BSTR id,
        /*[out,retval]*/ struct IiQAttributeIf * * attrIf ) = 0;
      virtual HRESULT __stdcall raw_getExceptionMsg (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * msg ) = 0;
      virtual HRESULT __stdcall raw_getNumberExceptions (
        /*[out,retval]*/ int * number ) = 0;
      virtual HRESULT __stdcall put_LoadOnlyWorkspaceFlag (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_getObject (
        /*[in]*/ BSTR id,
        /*[out,retval]*/ struct IiQObjectIf * * object ) = 0;
      virtual HRESULT __stdcall get_BlockExceptions (
        /*[out,retval]*/ VARIANT_BOOL * bBlock ) = 0;
      virtual HRESULT __stdcall put_BlockExceptions (
        /*[in]*/ VARIANT_BOOL bBlock ) = 0;
      virtual HRESULT __stdcall get_BlockProgressBars (
        /*[out,retval]*/ VARIANT_BOOL * bBlock ) = 0;
      virtual HRESULT __stdcall put_BlockProgressBars (
        /*[in]*/ VARIANT_BOOL bBlock ) = 0;
      virtual HRESULT __stdcall get_BlockDialogs (
        /*[out,retval]*/ VARIANT_BOOL * bBlock ) = 0;
      virtual HRESULT __stdcall put_BlockDialogs (
        /*[in]*/ VARIANT_BOOL bBlock ) = 0;
      virtual HRESULT __stdcall raw_getSelectionBorderIf (
        /*[out,retval]*/ struct IiQSelectionBorderIf * * selection ) = 0;
      virtual HRESULT __stdcall raw_createObject (
        /*[in]*/ BSTR objType,
        /*[out,retval]*/ struct IiQObjectIf * * objectIf ) = 0;
      virtual HRESULT __stdcall raw_getXYZScanPoints2 (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int numRows,
        /*[out]*/ SAFEARRAY * * pos,
        /*[out]*/ SAFEARRAY * * reflections,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getPolarScanPoints2 (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int numRows,
        /*[out]*/ SAFEARRAY * * pos,
        /*[out]*/ SAFEARRAY * * reflections,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getScanAnglesIf (
        /*[in]*/ int scanNb,
        /*[out,retval]*/ struct IFAROScanAnglesIf * * scanAnglesIf ) = 0;
      virtual HRESULT __stdcall raw_setFirstLoadFilter (
        /*[in]*/ long flag ) = 0;
      virtual HRESULT __stdcall raw_clearExceptions (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_enableLogFile (
        /*[in]*/ BSTR filePath,
        /*[in]*/ int log_level,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_disableLogFile (
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getNumAutomationMessages (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * numberOfMessages ) = 0;
      virtual HRESULT __stdcall raw_getAutomationMessage (
        /*[in]*/ int scan,
        /*[in]*/ int messageNr,
        /*[out]*/ unsigned __int64 * atime,
        /*[out]*/ unsigned int * canId,
        /*[out]*/ unsigned int * dataHigh,
        /*[out]*/ unsigned int * dataLow,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getPreviousAutomationMessage (
        /*[in]*/ int scan,
        /*[in]*/ unsigned __int64 atime,
        /*[out,retval]*/ int * messageNr ) = 0;
      virtual HRESULT __stdcall raw_getNextAutomationMessage (
        /*[in]*/ int scan,
        /*[in]*/ unsigned __int64 atime,
        /*[out,retval]*/ int * messageNr ) = 0;
      virtual HRESULT __stdcall raw_getNumAutomationTriggers (
        /*[in]*/ int scan,
        /*[out,retval]*/ int * numberOfTriggers ) = 0;
      virtual HRESULT __stdcall raw_getAutomationTriggerTime (
        /*[in]*/ int scan,
        /*[in]*/ int triggerNr,
        /*[out]*/ unsigned __int64 * atime,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getPreviousAutomationTrigger (
        /*[in]*/ int scan,
        /*[in]*/ unsigned __int64 atime,
        /*[out,retval]*/ int * triggerNr ) = 0;
      virtual HRESULT __stdcall raw_getNextAutomationTrigger (
        /*[in]*/ int scan,
        /*[in]*/ unsigned __int64 atime,
        /*[out,retval]*/ int * triggerNr ) = 0;
      virtual HRESULT __stdcall raw_getNearestScanPointFromAutomationTime (
        /*[in]*/ int scan,
        /*[in]*/ unsigned __int64 atime,
        /*[out]*/ int * row,
        /*[out]*/ int * col,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAutomationTimeOfScanPoint (
        /*[in]*/ int scan,
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ unsigned __int64 * atime,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall raw_getAutomationTimeOfSyncPulse (
        /*[in]*/ int scan,
        /*[in]*/ int col,
        /*[out]*/ unsigned __int64 * atime,
        /*[out,retval]*/ int * result ) = 0;
      virtual HRESULT __stdcall get_BuildType (
        /*[out,retval]*/ BSTR * type ) = 0;
};

struct __declspec(uuid("eac3c8b5-1d3f-48fb-a96f-97d90b726c53"))
iQLibIf;
    // [ default ] interface IiQLicensedInterfaceIf
    // [ restricted ] interface IiQLibIf
    HRESULT __stdcall ExtGenerateRuntimeLicense(
        BSTR * pBstrKey );
    HRESULT __stdcall ExtCreateInstanceLic_iQLibIf(
        BSTR bstrKey,
        struct IiQLibIf * * ppvLibIf );

//
// Wrapper method implementations
//

#include "d:\documents\3d systems korea\development\issues\controlx\gv-5647\new\faroopendemoapp\x64\debug\iqopen.tli"

#pragma pack(pop)
